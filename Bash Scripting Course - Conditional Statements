# Demonstrates how to use conditional statements 

############## pass parameters ##############
# first we need to discuss how to pass parameters that can be used in conditionals 
# script to show how to pass variables to scripts in the CLI
# create file
vim cmdlinevar.sh
#!/bin/bash

# demo of cmd line values passed in with our shell script
echo "The following item was passed into the script at run time $1" # in this case counting starts at 1 rather than 0 like many other computer counting does 

# exit and chmod u+x and execute to show that there's nothing displayed for $1 if there's no variable passed 
cmdlinevar.sh # displays nothing for $1
cmdlinevar.sh helloWorld # passed into script
cmdlinevar.sh hello world # only hello
cmdlinevar.sh "Hello World" # passes whole string with spaces
cmdlinevar.sh `expr 2 + 2` # passes in value of expr


# replace $1 in output string with variable to make it easier to read your code, know what the variables are used for and reuse in the script
vim cmdlinevar.sh 
USRENAME=$1
PASSWORD=$2
echo "The following username is $USERNAME and password is $PASSWORD" 

############## if statement ##############
 # if statements are the first conditional we will talk about and they are used to guide the computer in decision making and control the eb and flow of execution. 
 # we're keeping them outside of functions for now, but it gives us the ability to test for a wide variety of things (files, strings, ints comparison, etc )
 vim if.sh 
 #!/bin/bash
 # simple if statement script for guessing a number
 
 echo "Guess the Secret Number"
 echo "========================"
 echo ""
 echo "Enter a Number Between 1 and 5: "
 read GUESS
 if [ $GUESS -eq 3 ] # -eq is the same as == in some languages
   then
     echo "You  Guessed the Correct Number!"
 fi # if statements in bash end with a reverese if -> fi
 
 
 # example #2 we will test if a file exists via if statements
 vim testFile.sh 
 #!/bin/bash
 # tests for the existence of indicated file name
 
 FILENAME="mytest.txt" #can change "mytest.txt" to $1 to pass in param via cli
 echo "Testing for the existence of a file called $FILENAME" 
 
 fi [ -a $FILENAME ] # changing to [ ! -a $FILENAME ] will test for the file being nonexistent
   then 
     echo "File $FILENAME does exist" 
 fi
 
 
 # test for multiple values
 vim twovars.sh
 #!/bin/bash
 # tests multiple expressions in single if statement 
 
 FileNAME=$1
 
 echo "Testing for file $FILENAME and readability" 
 
 if [ -f $FILENAME ] && [ -r $FILENAME ]
   then 
     echo "File $FILENAME exists AND is readable"
fi


############## if then else ##############
# If statement gives us the ability to check conditions. We previously looked at the simplest of if statements
# Sometimes you have to react to multiple scenarios

vim ifThenElse.sh
#!/bin/bash
# simple example of if then else and nested if statements

echo "Enter a number between 1-3:"
read VALUE

# Previously we created a simple if statement such as the following. 
if [ "$VALUE" -eq "1" ]  # add "|| [ "$VALUE" -eq "2" ] || [ "$VALUE" -eq "1" ]; then" to output value entered for any number 1-3
  then 
    echo "You entered $VALUE"
fi


# if then example to output value entered for any number 1-3. 
# ORS use short circuit evaluation. 1 and done, will only evaluate until it finds a value that equals true, then it will stop and output
if [ "$VALUE" -eq "1" ] || [ "$VALUE" -eq "2" ] || [ "$VALUE" -eq "3" ]; then 
  echo "You entered $VALUE"
fi

# if then else example - the else statement will only execute if all of the previous statements in the if fail
# entering a string or char when an integer is expected will produce variable type errors 
if [ "$VALUE" -eq "1" ] || [ "$VALUE" -eq "2" ] || [ "$VALUE" -eq "3" ]; then # add 2>/dev/null after [ ] but before || to prevent TypeError output
  echo "You entered $VALUE"
else
  echo "You didn't follow directions!!"
fi

# if then else statement with individual output for each value for a given variable 1-3
# you can add as many elifs as you would like, these are also called nested if statements because there's multiple if statements nested 
# no extranous type error output to screen
if [ "$VALUE" -eq "1" ] 2>/dev/null; then 
  echo "You entered #1" 
elif [ "$VALUE" -eq "2" ] 2>/dev/null; then 
  echo "You entered #2" 
elif [ "$VALUE" -eq "3" ] 2>/dev/null; then # add 2>/dev/null after [ ] but before || to prevent TypeError output
  echo "You entered #3" 
else
  echo "You didn't follow directions!!"
fi

# change permissions and execute
chmod u+x ifThenElse.sh
ifThenElse.sh

############## For Loop ##############
# times when you need to process multiple items in a logical order
# can 

vim forexample.sh
#!/bin/bash
# this is a demo of the for loop

echo "List all the shell script contents of the directory" 

SHELLSCRIPTS =`ls *.sh`

for SCRIPT in "$SHELLSCRIPTS"; do 
  DISPLAY="`cat $SCRIPT`"
  echo "File: $SCRIPT - Contents $DISPLAY" 
done 

echo "Listing is: $SHELLSCRIPTS" # include to display contents of SHELLSCRIPTS without a for loop

############## Case Statement ##############
# Conditional that allows us to easily test values with less lines of code. 
# Commonly used for menues, init or startup scripts because it's easy and quick to test values. 

vim case.sh
#!/bin/bash

echo "MAIN MENU" 
echo "==========="
echo "1) Choice One" 
echo "2) Choice Two" 
echo "3) Choice Three" 
echo ""
echo "Enter Choice: " 
read MENUCHOICE

# case statements are good in this situation because it evaluates the number entered and decides quickly if it's a 1-3 or neither
case $MENUCHOICE in 
  1) 
    echo "Congratulations for choosing the first option";; <-- denotes that it's the last line to be executed for that particular block of code for that case
  2) 
    echo "Choice 2 chosen";; 
  3) 
    echo "Last choice made";; 
  *) 
    echo "You chose unwisely";; 
esac # similar to if statements, ending with the first word but in reverse 


############## While / Do While Loop ##############
# for loops have a set N number of values to loop through a particular piece of code or commands. 
# while loops is powerful in determining how many times you're wanting to do something and executing it for that amount of times. 

vim whileSample.sh
#!/bin/bash
# while loop example 

echo "Enter the number of times to display the 'Hello World' message"
read DISPLAYNUMBER

COUNT=1 # Start count at 1 then increment it each time after outputing the string so that the loop will terminate once it hits the provided number. Otherwise you'll be stuck in an infite loop. 

while [ $COUNT -le $DISPLAYNUMBER ] # do can be placed here as well. 
do 
  echo "Hello World - $COUNT" 
  COUNT="`expr $COUNT + 1`" 
done

############## Execution Operators (&& and ||) ##############
# way of controlling how cmds or parts of our script operate or execute
# || = or
# && = and

rm snafu # file doesn't exist and displays error message
rm snafu 2>/dev/null  # error message no longer displays
rm snafu 2>/dev/null && echo "File exists and was removed" # doesn't display echo statement
rm snafu 2>/dev/null && echo "File exists and was removed" || echo "File doesn't exist and cannot be deleted" # displays second error message

vim executionOps.sh
#!/bin/bash
# execution operators example

echo "Enter a number between 1-5"
read VALUE

if [ "$VALUE" -eq "1" ] || [ "$VALUE" -eq "3" ] || [ "$VALUE" -eq "5" ]; then # short circuit evaluation
  echo "You entered the ODD value of $VALUE"
else
  echo "You entered a value of $VALUE" 
fi

## Exercise Populate the first two with some default value and use command redirection to set the third and fourth value to the 
## date/time of when the script was started and completed. Within the script, be sure to disply the values to the terminal when run.
## Set 4 variables: MYUSERNAME, MYPASSWORD, STARTOFSCRIPT, ENDOFSCRIPT

