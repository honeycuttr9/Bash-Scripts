##### Reading Files ####
# Reading non binary files have many use cases that can be useful for system admins, security professionals, etc. 
# A standard way to read from a file passed in at runtime or included in a promt is by 

vim baseballteams.txt # enter baseball teams

vim fileReader.sh 
#!/bin/bash
# simple file reader for no-binary files. Displays one line at a time

echo "enter a file name to read: "
read FILE

while read -r BASEBALLTEAM; do 
  echo "Team Name: $BASEBALLTEAM" # can add additional manipulation in the while loop and an if statement before the loop to check if file existst
done < "$FILE"


##### File Descriptors & Handles ####
# file descriptors are a way for us to formally open and close a file 
# numeric representation of a file we want to read, write or read and write to and we can determine how we open that file at runtime. 
# as long as you use a number for your file descriptor that is greater than or equal to three you'll be fine because those are reserved for system I/O
# because in linux all files, folders, deviecs, & everything is treated as a file. 
# Reserved File Descriptors: 
# 0 - standard input
# 1 - standard output
# 2 - standard error 

vim fileDescriptor.sh
#!/bin/bash 
# demo of reading and writing to a file using a file descriptor

echo "Enter a file name to read: " 
read FILE

exec 5<>$FILE # 5 is > 2, we have to determine if we want to read(<) write(>) or do both(<>) on this file, 

while read -r BASEBALLTEAM; do 
  echo "Team Name: $BASEBALLTEAM" 
done <&5

echo "File was read on: `date`" >&5 # writes > statement and system date to file descriptor specified 

# Since we've opened a file descriptor we want to close it. 
# file descriptor is left open unless closed and can take up space that prevents you from using anymore file descriptors
exec 5>&~ # echo this out to the file descriptor and when we're done go ahead and close it 

fileDescriptor.sh # no echo with timestamp because it was written to after 
cat fileDescriptor.text # Shows the echo output saying it was read becuase it was added to the file after it was read.


##### IFS & Delimiting ####
# Dealing with delimited files are common tasks do deal with as system administrators. They're commonly used in backups, output for databases, etc. 
# Knowing how to process these delimitors and breaking them out is important 
# IFS is the variable we use for this. It stands for the Internal Field Seperator and it determines how Bash recognizes fields or boundaries when it interprets a character string. 
# to find out what it's set to by default we can do an echo on the IFS variable.
echo $IFS # As you can see it's blank and actually it's a space. 

# So by default it's going to read in a line or file that's delimited by a space. 
# create a file with a sentence that has space delimiters
vim spacedelim.txt
i7 4Ghz 32gb 4TB

vim pipedelim.txt
i7 4Ghz|32gb|4TB

vim semicolondelim.txt
i7 4Ghz;32gb;4TB

# create a delimiter.sh bash script. 
#!/bin/bash
# delimiter example using IFS
echo "Enter filename to parse: "
read FILE

echo "Enter the Delimiter " 
read DELIM

IFS="$DELIM"

while read -r CPU MEMORY DISK; do 
  echo "CPU: $CPU"
  echo "Memory: $MEMORY" 
  echo "Disk: $DISK" 
done <"$FILE" 

# run delmiter.sh the fistt time with a space delim and spacedelim.tx. 
# output will be incorrect because it just divided the first 3 spaces
# Adding pipes as delims in between what you're really wanting to divide is the best way to div
# create file with a different delimiter works too like a semicolon (;)
# Passing in a pipe as the delmimiter for a semicolon txt file will cause all of the lines to be printed on the first line, because a delimiter was never reached. 
# Delimiters can be anything, number 4, letter m, commas, etc. 


##### Traps & Signals ####
# Trap is a command in our bash script that gives us the ability to look for the occurence of something like an event, command, signal, or something that is happening in the system.  
# Sometimes you want to instantiate a menu that you can loop through and continue giving it new options, but sometimes you'd like to not have to exit via CTRL+C becuase your application needs to be able to do other operations like clean-up, etc. before completing. 
vim trap.sh
#!/bin/bash
# example of trapping events and limiting the shell stopping

clear

while [ "$CHOICE" != "Q" ] && [ "$CHOICE" != "q" ]; do 
  echo "MAIN MENU" 
  echo "========="
  echo "1) Choice One" 
  echo "2) Choice Two" 
  echo "3) Choice Three" 
  echo "Q) Quit/Exit" 
  echo ""
  read CHOICE
  
  clear
done

# At first this won't do anything until you add some additional functionality to it. 
# If you're sending a CTRL+C to exit aka a SIGINT (Signal interrupt) or a kill command you're sending a SIGTERM and both will exit the script ungracefully 
# We can trap those events from within our script and react to them differently so that they don't exit our script. 
# add the following to use the trap command

#!/bin/bash
# example of trapping events and limiting the shell stopping

clear

# we can signal a trap on a certain term, command or variable. But let's display a message everytime a SIGINT or SIGTERM is entered. Can't be used for a SIG minus 9 because that occurs at the kernel level and will kill anything that is running. But a simple kill is a SIGTERM and can be trapped.
# the below trap prompts users to exit by entering Q rather than by using CTRL+C
trap 'echo " - Please Press Q to Exit..."' SIGINT SIGTERM # add SIGTSTP Signal stop or suspend (CTRL^Z) 

while [ "$CHOICE" != "Q" ] && [ "$CHOICE" != "q" ]; do 
  echo "MAIN MENU" 
  echo "========="
  echo "1) Choice One" 
  echo "2) Choice Two" 
  echo "3) Choice Three" 
  echo "Q) Quit/Exit" 
  echo ""
  read CHOICE
  
  clear
done

# test with new setup
# hit CTRL+C to check that it works and then try CTRL+Z 
ps aux | grep trap # CTRL^Z suspends the execution of the script in anticipation that I am going to send it to the background or something. 
# add output above to catch CTRL+Z and to handle this event gracefully. 


